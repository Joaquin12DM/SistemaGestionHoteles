# name: Release Pipeline

# on:
#   push:
#     tags:
#       - 'v*'

# env:
#   REGISTRY: ghcr.io
#   IMAGE_PREFIX: ${{ github.repository }}

# jobs:
#   # Crear release
#   create-release:
#     runs-on: ubuntu-latest
#     outputs:
#       version: ${{ steps.version.outputs.version }}
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Get version
#         id: version
#         run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
#       - name: Create Release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ steps.version.outputs.version }}
#           release_name: Release ${{ steps.version.outputs.version }}
#           draft: false
#           prerelease: false

#   # Build y tag de imágenes para release
#   build-release-images:
#     needs: create-release
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         service: [frontend, api-gateway, auth-service, hotel-service, booking-service, user-service, payment-service, notification-service]
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Login to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       - name: Build and push Frontend
#         if: matrix.service == 'frontend'
#         run: |
#           cd frontend
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ needs.create-release.outputs.version }} .
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:latest .
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ needs.create-release.outputs.version }}
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:latest
      
#       - name: Build and push Spring Services
#         if: matrix.service != 'frontend' && matrix.service != 'notification-service'
#         run: |
#           cd services/${{ matrix.service }}
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ needs.create-release.outputs.version }} .
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest .
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:${{ needs.create-release.outputs.version }}
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/${{ matrix.service }}:latest
      
#       - name: Build and push Notification Service
#         if: matrix.service == 'notification-service'
#         run: |
#           cd services/notification-service
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/notification-service:${{ needs.create-release.outputs.version }} .
#           docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/notification-service:latest .
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/notification-service:${{ needs.create-release.outputs.version }}
#           docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/notification-service:latest

#   # Deploy a producción
#   deploy-production:
#     needs: [create-release, build-release-images]
#     runs-on: ubuntu-latest
#     environment: production
#     steps:
#       - uses: actions/checkout@v4
      
#       - name: Deploy to Production
#         run: |
#           echo "Deploying version ${{ needs.create-release.outputs.version }} to production"
#           # Aquí irían los comandos de deployment real
#           # kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend:${{ needs.create-release.outputs.version }}
#           # etc...
